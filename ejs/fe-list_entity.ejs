// React
import React, { useContext, useRef } from 'react';
// Antd
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { ActionType, PageContainer, ProProvider, TableDropdown } from '@ant-design/pro-components';
import { Button, Layout, message, Segmented, Space, Typography } from 'antd';
// Umi
import { Access } from '@umijs/max';
import { history } from 'umi';
// Components
import { CreateModal } from '@/shares/components/CreateModal';
import { valueTypeMap } from '@/shares/components/schema-components';
import { UltraColumns } from '@/shares/components/UltraColumns';
import UltraTable from '@/shares/components/UltraTable';
// Services
import { create<%= PascalCase %>, delete<%= PascalCase %>, query<%= PascalCase %>List } from '@/services/cmp/<%= camelCase %>';
// Hooks
import { useDetailPageDrawer } from '@/shares/hooks/detailPageDrawer';
import { useDevInspector } from '@/shares/hooks/devInspector';
import { useFlowBacklog } from '@/shares/hooks/flowBacklog';
import { useImportData } from '@/shares/hooks/importData';
import { useListState } from '@/shares/hooks/listState';
import { usePageConfig } from '@/shares/hooks/pageConfig';
import { usePageParam } from '@/shares/hooks/pageParam';
import { useStateMachine } from '@/shares/hooks/stateMachine';
// Definitions
import { gen<%= PascalCase %>Columns } from './<%= camelCase %>.column';
import { gen<%= PascalCase %>FormColumns } from './<%= camelCase %>.form';
// Subpages

const { Content } = Layout;

// Types
type T<%= PascalCase %>Filter = API.Filter<<%= PascalCase %>>;

const <%= PascalCase %>List: React.FC = () => {
  // 引用上下文
  const contextFormValues = useContext(ProProvider);
  // useRef
  const actionRef = useRef<ActionType>();
  // 页面参数
  const { valueEnums, cusParams } = usePageParam();
  // 页面配置
  const { pageTitle, routeKey, access, privileges, presetColumns, presetFilters, viewFilterEnum, ClearCache } =
    usePageConfig();
  // 列表状态
  const { view, setView, currentRow, setCurrentRow, setCurrentFilter, confirmDelete } = useListState<<%= PascalCase %>>(
    actionRef,
    {
      viewFilterEnum,
      onDelete: (records: ManifestHead[]) => delete<%= PascalCase %>(records.map((record) => record.uid)),
    },
  );
  // 状态机
  const { getCurrentState } = useStateMachine('internal/<%= PascalCase %>');
  // Actions
  const gotoDetailPage = (uid: string) => {
    history.push(`/filing/<%= camelCase %>/${uid}`);
  };
  // 流程待办
  const { BacklogList } = useFlowBacklog('internal/<%= PascalCase %>', gotoDetailPage);
  // 详情页 Drawer
  const { detailPageDrawerOpen, setDetailPageDrawerOpen, DetailPageDrawer } = useDetailPageDrawer(
    <<%= PascalCase %>Detail uid={currentRow?.uid!} onUpdated={() => {}} insideDrawer />,
  );



  // Table Columns
  const actionRender = (dom: React.ReactNode, record: <%= PascalCase %>) => [
  <Access key="read" accessible={access.canRead(privileges)}>
    <Button
      key="read"
      type="link"
      size="small"
      onClick={() => gotoDetailPage(record.uid)}
      // onClick={() => {
      //   setCurrentRow(record);
      //   setDetailPageDrawerOpen(true);
      // }}
    >
      <EditOutlined />
    </Button>
  </Access>,
  <Access key="dropdown" accessible={access.canDestroy(privileges)}>
    <TableDropdown
      key="dropdown"
      menus={[{ key: 'delete', name: <Typography.Text type="danger">删除</Typography.Text> }]}
      onSelect={(key: string) => {
        if (key === 'delete') {
          confirmDelete([record]);
        }
      }}
    />
  </Access>,
  ];

  const ultraColumns = new UltraColumns<<%= PascalCase %>>(
    gen<%= PascalCase %>Columns({
      presetColumns,
      valueEnums,
      cusParams,
    }),
    actionRender,
  );

  const { DevInspector } = useDevInspector({ routeKey, presetFilters, access, privileges });

  return (
    <ProProvider.Provider
      value={{
        ...contextFormValues,
        valueTypeMap,
      }}
    >
      <PageContainer
        ghost
        header={{
          title: '<%= label %>',
        }}
        extra={[
          <Access key="create" accessible={access.canCreate(privileges)}>
            <CreateModal
              key="create"
              title="新建<%= label %>"
              layoutType="DrawerForm"
              formLayout="horizontal"
              formColumns={gen<%= PascalCase %>FormColumns({
                isCreate: true,
              })}
              onCreate={async (values: <%= PascalCase %>) => {
                const res = await create<%= PascalCase %>(values);
                if (res.success) {
                  message.success('新建成功');
                  actionRef.current?.reload();
                }
                return res.success;
              }}
            />
          </Access>,
          <DevInspector key="dev" />,
          <TableDropdown key="dropdown" menus={[ClearCache]} onSelect={(key: string) => {}} />,
        ]}
      >
        <Layout className="ant-layout-has-sider">
          <Content style={{ background: '#fff' }}>
            <UltraTable
              rowKey="uid"
              headerTitle={
                <Space>
                  <Segmented
                    options={presetFilters}
                    value={view}
                    onChange={(value) => {
                      setView(value as string);
                      actionRef.current?.reloadAndRest?.();
                    }}
                    style={{ marginLeft: 4 }}
                  />
                  <BacklogList />
                </Space>
              }
              actionRef={actionRef}
              columns={ultraColumns.getColumns()}
              search={{
                labelWidth: 'auto',
              }}
              request={async (params, sorter) => {
                const { current, pageSize, ...search } = params;
                const filter: T<%= PascalCase %>Filter = { ...ultraColumns.generateFilter(search), ...viewFilterEnum[view]};
                setCurrentFilter(filter);
                const res = await query<%= PascalCase %>List({
                  current,
                  pageSize,
                  columns: ultraColumns.getColumnKeys(),
                  filter,
                  sorter: Object.keys(sorter).length > 0 ? sorter : undefined,
                });
                return {
                  data: res.result.data,
                  success: res.success,
                  total: res.result.total,
                };
              }}
              toolBarRender={() => []}
              rowSelection={{}}
              tableAlertRender={({ selectedRowKeys, selectedRows, onCleanSelected }) => {
                const stateCodeSet = new Set(selectedRows.map((row) => row.stateCode));
                if (stateCodeSet.size > 1) {
                  notification.warning({
                    key: 'stateCode',
                    message: '警告',
                    description: '只能对同一状态的项进行批量操作',
                  });
                }
                let currentState;
                if (stateCodeSet.size === 1) {
                  currentState = getCurrentState(Array.from(stateCodeSet)[0]!);
                }
                return (
                  <Space size={24}>
                    <span>已选 {selectedRowKeys.length} 项</span>
                    <Access accessible={access.canTenantAdmin() && !!currentState?.actions.includes('delete<%= PascalCase %>')}>
                      <Button
                        key="delete"
                        type="link"
                        danger
                        icon={<DeleteOutlined />}
                        onClick={() => {
                          confirmDelete(selectedRows);
                        }}
                      >
                        删除
                      </Button>
                    </Access>
                  </Space>
                );
              }}
              locale={
                {
                  // emptyText: () => renderEmptyText(actionRef, declarationStatistic?.unclassified, setAspect),
                }
              }
              columnsState={{
                persistenceKey: routeKey,
                persistenceType: 'localStorage',
              }}
              scroll={{ x: ultraColumns.totalWidth }}
              rowClassName={(record) => {
                // if (record.stateCode !== 0) {
                //   return 'table-row-disabled';
                // }
                return '';
              }}
            />

            <DetailPageDrawer
              values={currentRow}
              drawerOpen={detailPageDrawerOpen}
              onCancel={() => {
                actionRef.current?.reload();
                setDetailPageDrawerOpen(false);
                setCurrentRow(undefined);
              }}
            />
          </Content>
        </Layout>
      </PageContainer>
    </ProProvider.Provider>
  );
};
export default <%= PascalCase %>List;
