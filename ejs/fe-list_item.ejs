// React
import React, { useContext, useRef } from 'react';
// Antd
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { ActionType, ProProvider, TableDropdown } from '@ant-design/pro-components';
import { Button, Layout, message, Space, Typography } from 'antd';
// Umi
import { Access } from '@umijs/max';
import { history } from 'umi';
// Components
import { CreateModal } from '@/components/CreateModal';
import { valueTypeMap } from '@/components/schema-components';
import { UltraColumns } from '@/components/UltraColumns';
import UltraTable from '@/components/UltraTable';
// Services
import { create<%= PascalCase %>, delete<%= PascalCase %>, query<%= PascalCase %>List } from '@/services/cmp/<%= camelCase %>';
// Hooks
import { useDetailPageDrawer } from '@/shares/hooks/detailPageDrawer';
import { useListState } from '@/shares/hooks/listState';
import { usePageConfig } from '@/shares/hooks/pageConfig';
import { usePageParam } from '@/shares/hooks/pageParam';
// Definitions
import { gen<%= PascalCase %>Columns } from './<%= camelCase %>.column';
import { gen<%= PascalCase %>FormColumns } from './<%= camelCase %>.form';

const { Content } = Layout;

// Types
type T<%= PascalCase %>Filter = API.Filter<<%= PascalCase %>>;

const <%= PascalCase %>List: React.FC<{ <%= aggrKey %>: string}> = (props) => {
  // 引用上下文
  const contextFormValues = useContext(ProProvider);
  const { contextValues, contextState, contextRouteKey } = useContext(ParentContext);
  // 页面参数
  const { valueEnums, cusParams } = usePageParam();
  // 页面配置
  const { access, privileges } = usePageConfig(contextRouteKey);
  // useRef
  const actionRef = useRef<ActionType>();
  // 列表状态
  const { view, setView, currentRow, setCurrentRow, confirmDelete } = useListState<<%= PascalCase %>>(actionRef, {
    onDelete: (records: DeclarationItem[]) => delete<%= PascalCase %>(records.map((record) => record.uid)),
  });
  // 详情页 Drawer
  const { detailPageDrawerOpen, setDetailPageDrawerOpen, DetailPageDrawer } = useDetailPageDrawer(
    <<%= PascalCase %>Detail
      uid={currentRow?.uid!}
      onUpdated={() => actionRef.current?.reload()}
      onClose={() => {
        setDetailPageDrawerOpen(false);
        actionRef.current?.reloadAndRest?.();
      }}
      insideDrawer
    />,
  );

  // Actions
  const gotoDetailPage = (uid: string) => {
    history.push(`/filing/<%= camelCase %>/item/${uid}`);
  };

  const actionRender = (dom: React.ReactNode, record: <%= PascalCase %>) => [
    <Access key="read" accessible={access.canRead(privileges)}>
      <Button
        type="link"
        size="small"
        // onClick={() => gotoDetailPage(record.uid)}
        onClick={() => {
          setCurrentRow(record);
          setDetailPageDrawerOpen(true);
        }}
      >
        <EditOutlined />
      </Button>
    </Access>,
    <Access key="dropdown" accessible={access.canWrite(privileges, contextState)}>
      <TableDropdown
        menus={[{ key: 'delete', name: <Typography.Text type="danger">删除</Typography.Text> }]}
        onSelect={(key: string) => {
          if (key === 'delete') {
            confirmDelete([record]);
          }
        }}
      />
    </Access>,
  ];

  // Table Columns
  const ultraColumns = new UltraColumns<<%= PascalCase %>>(
    gen<%= PascalCase %>Columns({
      valueEnums,
      cusParams,
    }),
    actionRender,
  );

  return (
    <Layout className="ant-layout-has-sider">
      <Content style={{ background: '#fff' }}>
        <ProProvider.Provider
        value={{
          ...contextFormValues,
          valueTypeMap,
        }}
      >
          <UltraTable
            rowKey="uid"
            actionRef={actionRef}
            columns={ultraColumns.getColumns()}
            request={async (params, sorter) => {
              const { current, pageSize, ...search } = params;
              const filter: T<%= PascalCase %>Filter = { ...ultraColumns.generateFilter(search), <%= aggrKey %>: props.<%= aggrKey %>};
              const res = await query<%= PascalCase %>List({
                current,
                pageSize,
                columns: ultraColumns.getColumnKeys(),
                filter,
                sorter: Object.keys(sorter).length > 0 ? sorter : undefined,
                // tenantId,
              });
              // setIdentifiers(res.result.data.map((item) => item.uid!));
              return {
                data: res.result.data,
                success: res.success,
                total: res.result.total,
              };
            }}
            toolBarRender={() => [
              <Access key="create" accessible={access.canWrite(privileges, contextState)}>
              <CreateModal
                key="create"
                title="新建<%= label %>"
                formColumns={gen<%= PascalCase %>FormColumns({
                  isCreate: true,
                })}
                onCreate={async (values: <%= PascalCase %>) => {
                  const res = await create<%= PascalCase %>({...values, <%= aggrKey %>: props.<%= aggrKey %>});
                  if (res.success) {
                    message.success('新建成功');
                    actionRef.current?.reload();
                  }
                  return res.success;
                }}
              />
            </Access>,
            ]}
            search={{
              filterType: 'light',
            }}
            cardProps={{ bodyStyle: { padding: 0 } }}
            rowSelection={{}}
            tableAlertRender={({ selectedRowKeys, selectedRows, onCleanSelected }) => (
              <Space size={24}>
                <span>已选 {selectedRowKeys.length} 项</span>
                <Access key="delete" accessible={access.canWrite(privileges, contextState)}>
                  <Button
                    key="delete"
                    type="link"
                    icon={<DeleteOutlined />}
                    onClick={() => {
                      confirmDelete(selectedRows);
                    }}
                  >
                    删除
                  </Button>
                </Access>
              </Space>
            )}
            locale={
              {
                // emptyText: () => renderEmptyText(actionRef, declarationStatistic?.unclassified, setAspect),
              }
            }
            scroll={{ x: ultraColumns.totalWidth }}
            // scrollYOffset={344}
          />
        </ProProvider.Provider>
          <DetailPageDrawer
            values={currentRow}
            drawerOpen={detailPageDrawerOpen}
            onCancel={() => {
              actionRef.current?.reload();
              setDetailPageDrawerOpen(false);
              setCurrentRow(undefined);
            }}
          />
          </Content>
    </Layout>
  );
};
export default <%= PascalCase %>List;
