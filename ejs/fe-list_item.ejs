import { CreateModal } from '@/shares/components/CreateModal';
import { genExportColumnKeys, valueTypeMap } from '@/shares/components/schema-components';
import UltraTable from '@/shares/components/UltraTable';
import { useDetailPageDrawer, useExportData, useImportData, useListState, usePageConfig } from '@/shares/hooks';
import { ListCommonProps } from '@/shares/typings/common';
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { ActionType, ProProvider } from '@ant-design/pro-components';
import { Access } from '@umijs/max';
import { Button, Layout, message, Space } from 'antd';
import React, { useContext, useMemo, useRef } from 'react';
import { history } from 'umi';

import { 
  create<%= PascalCase %>, 
  delete<%= PascalCase %>, 
  export<%= PascalCase %>, 
  query<%= PascalCase %>List 
} from '@/services/<%= moduleName%>/<%= aggrName %>';
import { ParentContext } from '../<%= aggrName %>.detail';
import { gen<%= PascalCase %>Columns } from './<%= camelCase %>.column';
import { gen<%= PascalCase %>FormColumns } from './<%= camelCase %>.form';
import <%= PascalCase %>Detail from './<%= camelCase %>.detail';

const { Content } = Layout;

// Types
type T<%= PascalCase %>Filter = API.Filter<<%= PascalCase %>>;

const <%= PascalCase %>List: React.FC<
ListCommonProps & {
   <%= aggrKey %>: string; 
   actionRef?: React.MutableRefObject<ActionType | undefined> 
}> = (props) => {
  // 引用上下文

  const { contextValues, contextState, contextRouteKey } = useContext(ParentContext);
  // useRef
  const actionRef = props.actionRef || useRef<ActionType>();
  // 页面配置
  const { access, privileges, presetColumns } = usePageConfig({ contextRouteKey });
  // 表单操作项
  const actionRender = (dom: React.ReactNode, record: <%= PascalCase %>) => [
      <Button
        type="link"
        size="small"
        // onClick={() => gotoDetailPage(record.uid)}
        onClick={() => {
          setCurrentRow(record);
          setDetailPageDrawerOpen(true);
        }}
      >
        <EditOutlined />
      </Button>,

  ];
  // 列表状态
  const { currentRow, setCurrentRow, setCurrentFilter, confirmDelete, ultraColumns } =
    useListState<<%= PascalCase %>>(actionRef, {
      presetColumns,
      actionRender,
      genColumns: gen<%= PascalCase %>Columns,
      genFormColumns: gen<%= PascalCase %>FormColumns,
    onDelete: (records: <%= PascalCase %>[]) => delete<%= PascalCase %>(records.map((record) => record.uid)),
  });
  const createFormColumns = useMemo(() => {
    return gen<%= PascalCase %>FormColumns({
      isCreate: true,
      warehouseCode: contextValues?.warehouseCode!,
    });
  }, [contextValues?.warehouseCode]);

  // Actions
  const gotoDetailPage = (uid: string) => {
    // TODO: 修改详情页路由
    history.push(`/<%= aggrName %>/<%= camelCase %>/${uid}`);
  };

  // 详情页 Drawer
  const { detailPageDrawerOpen, setDetailPageDrawerOpen, DetailPageDrawer } = useDetailPageDrawer(
    <<%= PascalCase %>Detail
      uid={currentRow?.uid!}
      onUpdated={() => actionRef.current?.reload()}
      onClose={() => {
        setDetailPageDrawerOpen(false);
        actionRef.current?.reloadAndRest?.();
      }}
      insideDrawer
    />,
  );


  const { ExportData } = useExportData(
    export<%= PascalCase %>,
    genExportColumnKeys(gen<%= PascalCase %>Columns, { presetColumns }),
    {
      noAttachment: true,
      bizUid: props.<%= aggrKey  %>,
    },
  );

  // import<%= PascalCase %>
  const { ImportData } = useImportData('internal/<%= PascalCase %>', '/<%=moduleName %>/api/<%= slashPath %>/import', {
    plain: true,
    initialValues: {
      <%= aggrKey %>: props.<%= aggrKey %>,
    },
    hideFlow: true,
  });

  return (

      <Layout className="ant-layout-has-sider">
        <Content>
          <UltraTable
            rowKey="uid"
            actionRef={actionRef}
            columns={ultraColumns.getColumns()}
            embedded={props.embedded}
            tabbed={props.tabbed}
            request={async (params, sorter) => {
              const { current, pageSize, ...search } = params;
              const filter: T<%= PascalCase %>Filter = { 
                ...ultraColumns.generateFilter(search), 
                <%= aggrKey %>: props.<%= aggrKey %>,
              };
              setCurrentFilter(filter);
              const res = await query<%= PascalCase %>List({
                current,
                pageSize,
                columns: ultraColumns.getColumnKeys(),
                filter,
                sorter: sorter && Object.keys(sorter).length > 0 ? sorter : { gdsSeqno: 'ascend' },
              });
              return {
                data: res.result.data,
                success: res.success,
                total: res.result.total,
              };
            }}
            toolBarRender={() => [
              <ImportData key="import" onSuccess={() => actionRef.current?.reloadAndRest?.()} />,
              <ExportData key="export" filter={{ <%= aggrKey %>: props.<%= aggrKey %> }} sorter={{ gdsSeqno: 'ascend' }} />,
              <Access key="create" accessible={access.canWrite(privileges, contextState)}>
                <CreateModal
                  title="新增"
                  layoutType="DrawerForm"
                  formLayout="horizontal"
                  formColumns={createFormColumns}
                  onCreate={async (values: <%= PascalCase %>) => {
                    const res = await create<%= PascalCase %>({...values, <%= aggrKey %>: props.<%= aggrKey %>});
                    if (res?.success) {
                      message.success('新建成功');
                      actionRef.current?.reload();
                    }
                    return res.success;
                  }}
                />
              </Access>,
            ]}
  
            rowSelection={{}}
            tableAlertRender={({ selectedRowKeys, selectedRows, onCleanSelected }) => (
              <Space size={8}>
                <span>已选 {selectedRowKeys.length} 项</span>
                <Access accessible={access.canWrite(privileges, contextState)}>
                  <Button
                    key="delete"
                    type="link"
                    danger
                    icon={<DeleteOutlined />}
                    onClick={() => {
                      confirmDelete(selectedRows);
                    }}
                  >
                    删除
                  </Button>
                </Access>
              </Space>
            )}
            locale={
              {
                // emptyText: () => renderEmptyText(actionRef, declarationStatistic?.unclassified, setAspect),
              }
            }
            scroll={{ x: ultraColumns.totalWidth }}
            summary={(pageData) => {
              return ultraColumns.getSummary(pageData);
            }}
          />

          <DetailPageDrawer
            values={currentRow}
            drawerOpen={detailPageDrawerOpen}
            onCancel={() => {
              actionRef.current?.reload();
              setDetailPageDrawerOpen(false);
              setCurrentRow(undefined);
            }}
          />
        </Content>
      </Layout>

  );
};
export default <%= PascalCase %>List;
