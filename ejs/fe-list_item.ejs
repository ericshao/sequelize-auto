// React
import React, { useContext } from 'react';
// Antd
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { ActionType, ProProvider, TableDropdown } from '@ant-design/pro-components';
import { Button, Layout, message, Space, Typography } from 'antd';
// Umi
import { Access } from '@umijs/max';
import { history } from 'umi';
// Components
import { CreateModal } from '@/shares/components/CreateModal';
import { valueTypeMap } from '@/shares/components/schema-components';
import UltraTable from '@/shares/components/UltraTable';
// Services
import { create<%= PascalCase %>, delete<%= PascalCase %>, query<%= PascalCase %>List } from '@/services/<%= moduleName%>/<%= aggrName %>';
// Hooks
import { useDetailPageDrawer } from '@/shares/hooks/detailPageDrawer';
import { useListState } from '@/shares/hooks/listState';
import { usePageConfig } from '@/shares/hooks/pageConfig';
import { usePageParam } from '@/shares/hooks/pageParam';
// Definitions
import { ParentContext } from '../<%= aggrName %>.detail';
import { gen<%= PascalCase %>Columns } from './<%= camelCase %>.column';
import { gen<%= PascalCase %>FormColumns } from './<%= camelCase %>.form';

const { Content } = Layout;

// Types
type T<%= PascalCase %>Filter = API.Filter<<%= PascalCase %>>;

const <%= PascalCase %>List: React.FC<{ <%= aggrKey %>: string; actionRef: React.MutableRefObject<ActionType | undefined> }> = (props) => {
  // 引用上下文
  const contextFormValues = useContext(ProProvider);
  const { contextValues, contextState, contextRouteKey } = useContext(ParentContext);
  // 页面参数
  const { valueEnums, cusParams } = usePageParam();
  // 页面配置
  const { access, privileges, presetColumns } = usePageConfig(contextRouteKey);
  // 表单操作项
  const actionRender = (dom: React.ReactNode, record: <%= PascalCase %>) => [
    <Access key="read" accessible={access.canRead(privileges)}>
      <Button
        type="link"
        size="small"
        // onClick={() => gotoDetailPage(record.uid)}
        onClick={() => {
          setCurrentRow(record);
          setDetailPageDrawerOpen(true);
        }}
      >
        <EditOutlined />
      </Button>
    </Access>,
    <Access key="dropdown" accessible={access.canWrite(privileges, contextState)}>
      <TableDropdown
        menus={[{ key: 'delete', name: <Typography.Text type="danger">删除</Typography.Text> }]}
        onSelect={(key: string) => {
          if (key === 'delete') {
            confirmDelete([record]);
          }
        }}
      />
    </Access>,
  ];
  // 列表状态
  const { currentRow, setCurrentRow, setCurrentFilter, confirmDelete, ultraColumns, createFormColumns } =
    useListState<<%= PascalCase %>>(props.actionRef, {
      presetColumns,
      actionRender,
      genColumns: gen<%= PascalCase %>Columns,
      genFormColumns: gen<%= PascalCase %>FormColumns,
    onDelete: (records: <%= PascalCase %>[]) => delete<%= PascalCase %>(records.map((record) => record.uid)),
  });
  // Actions
  const gotoDetailPage = (uid: string) => {
    // TODO: 修改详情页路由
    history.push(`/<%= aggrName %>/<%= camelCase %>/${uid}`);
  };

  // 详情页 Drawer
  const { detailPageDrawerOpen, setDetailPageDrawerOpen, DetailPageDrawer } = useDetailPageDrawer(
    <<%= PascalCase %>Detail
      uid={currentRow?.uid!}
      onUpdated={() => props.actionRef.current?.reload()}
      onClose={() => {
        setDetailPageDrawerOpen(false);
        props.actionRef.current?.reloadAndRest?.();
      }}
      insideDrawer
    />,
  );

  return (
    <ProProvider.Provider
      value={{
        ...contextFormValues,
        valueTypeMap,
      }}
    >
      <Layout className="ant-layout-has-sider">
        <Content style={{ background: '#fff' }}>
          <UltraTable
            rowKey="uid"
            actionRef={props.actionRef}
            columns={ultraColumns.getColumns()}
            request={async (params, sorter) => {
              const { current, pageSize, ...search } = params;
              const filter: T<%= PascalCase %>Filter = { ...ultraColumns.generateFilter(search), <%= aggrKey %>: props.<%= aggrKey %>};
              setCurrentFilter(filter);
              const res = await query<%= PascalCase %>List({
                current,
                pageSize,
                columns: ultraColumns.getColumnKeys(),
                filter,
                sorter: Object.keys(sorter).length > 0 ? sorter : undefined,
              });
              return {
                data: res.result.data,
                success: res.success,
                total: res.result.total,
              };
            }}
            toolBarRender={() => [
              <Access key="create" accessible={access.canWrite(privileges, contextState)}>
                <CreateModal
                  title="新建<%= label %>"
                  layoutType="DrawerForm"
                  formLayout="horizontal"
                  formColumns={createFormColumns}
                  onCreate={async (values: <%= PascalCase %>) => {
                    const res = await create<%= PascalCase %>({...values, <%= aggrKey %>: props.<%= aggrKey %>});
                    if (res.success) {
                      message.success('新建成功');
                      props.actionRef.current?.reload();
                    }
                    return res.success;
                  }}
                />
              </Access>,
            ]}
            search={{
              filterType: 'light',
            }}
            cardProps={{ bodyStyle: { padding: 0 } }}
            rowSelection={{}}
            tableAlertRender={({ selectedRowKeys, selectedRows, onCleanSelected }) => (
              <Space size={24}>
                <span>已选 {selectedRowKeys.length} 项</span>
                <Access accessible={access.canWrite(privileges, contextState)}>
                  <Button
                    key="delete"
                    type="link"
                    danger
                    icon={<DeleteOutlined />}
                    onClick={() => {
                      confirmDelete(selectedRows);
                    }}
                  >
                    删除
                  </Button>
                </Access>
              </Space>
            )}
            locale={
              {
                // emptyText: () => renderEmptyText(actionRef, declarationStatistic?.unclassified, setAspect),
              }
            }
            scroll={{ x: ultraColumns.totalWidth }}
            summary={(pageData) => {
              return ultraColumns.getSummary(pageData);
            }}
          />

          <DetailPageDrawer
            values={currentRow}
            drawerOpen={detailPageDrawerOpen}
            onCancel={() => {
              props.actionRef.current?.reload();
              setDetailPageDrawerOpen(false);
              setCurrentRow(undefined);
            }}
          />
        </Content>
      </Layout>
    </ProProvider.Provider>
  );
};
export default <%= PascalCase %>List;
