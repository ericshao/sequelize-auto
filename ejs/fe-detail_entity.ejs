// React
import React, { useContext, useMemo, useRef, useState } from 'react';
// Antd
import { SaveOutlined } from '@ant-design/icons';
import { ActionType, PageContainer, ProCard, ProFormInstance, ProProvider, TableDropdown } from '@ant-design/pro-components';
import { message, Typography } from 'antd';
// Umi
// Components
import { valueTypeMap, ValueTypeMapKey } from '@/shares/components/schema-components';
import BetaSchemaForm from '@/shares/components/SchemaForm';
import AuditLog from '@/shares/components/AuditLog';
// Services
import { queryAuditLogList } from '@/services/<%= moduleName%>/audit/log';
import { get<%= PascalCase %>, update<%= PascalCase %> } from '@/services/<%= moduleName%>/<%= camelCase %>';
// Utils
import { ActionMap, renderActions } from '@/shares/components/utils';
// Hooks
import { useDevInspector } from '@/shares/hooks/devInspector';
import { useEventViewer } from '@/shares/hooks/eventViewer';
import { useFormState } from '@/shares/hooks/formState';
import { usePageConfig } from '@/shares/hooks/pageConfig';
import { usePageParam } from '@/shares/hooks/pageParam';
import { useStateMachine } from '@/shares/hooks/stateMachine';
// Definitions
import { gen<%= PascalCase %>FormColumns } from './<%= camelCase %>.form';
// Subpages

type <%= PascalCase %>DetailProps = {
  uid: string;
  onUpdated?: () => void;
  onClose?: () => void;
  insideDrawer?: boolean;
};

export const ParentContext = React.createContext<{
  contextRouteKey?: string;
  contextValues?: <%= PascalCase %>;
  contextState?: SMState;
}>({});

const <%= PascalCase %>Detail: React.FC<<%= PascalCase %>DetailProps> = (props) => {
  // 引用上下文
  const contextFormValues = useContext(ProProvider);
  // 页面参数
  const { uid } = usePageParam(props);
  // 页面配置
  const { pageTitle, routeKey, access, privileges, presetColumns, getTabName, ClearCache } = usePageConfig();
  // useRef
  const formRef = useRef<ProFormInstance<<%= PascalCase %>>>();
  const itemActionRef = useRef<ActionType>();
  // 表单状态
  const {
    loading,
    setLoading,
    formLayout,
    FormLayoutSegmented,
    currentValues,
    setCurrentValues,
    valuesChanged,
    setValuesChanged,
    updateCurrentValues,
    getUpdateValues,
    Reload,
    ResolveConflictModal,
  } = useFormState<<%= PascalCase %>>(formRef, get<%= PascalCase %>, update<%= PascalCase %>);
  // 状态机
  const { currentState } = useStateMachine('internal/<%= PascalCase %>', currentValues?.stateCode!);

  const [tabActiveKey, setTabActiveKey] = useState('main');

  const actions: ActionMap = useMemo(() => {
    return {
      update<%= PascalCase %>: {
        text: '保存',
        icon: <SaveOutlined />,
        type: 'primary',
        disabled: !valuesChanged,
        onClick: () => formRef.current?.submit(),
        accessible: access.canWrite(privileges, currentState),
      },
    };
  }, [valuesChanged, access, privileges, formRef.current, currentValues, currentState]);

  const { EventViewer } = useEventViewer(currentValues?.uid!);

  const { DevInspector } = useDevInspector({ routeKey, currentValues, currentState, access, privileges });

  return (
    <ProProvider.Provider
      value={{
        ...contextFormValues,
        valueTypeMap,
      }}
    >
      <ParentContext.Provider
        value={{ contextRouteKey: routeKey, contextValues: currentValues, contextState: currentState }}
      >
        <PageContainer
          ghost
          header={{
            title: currentValues?.uid,
            subTitle: (
              <Typography.Text type="secondary" copyable>
                {currentValues?.uid}
              </Typography.Text>
            ),
            onBack: props.insideDrawer ? () => props.onClose?.() : () => history.back(),
            breadcrumb: {
              items: [
                {
                  path: '/',
                  title: pageTitle,
                },
              ],
            },
            style: { zIndex: 10 },
          }}
          tabList={[
            {
              tab: '表头',
              key: 'head',
              children: (
                <ProCard bordered>
                  <BetaSchemaForm<<%= PascalCase %>, ValueTypeMapKey>
                    loading={loading}
                    layout={formLayout}
                    layoutType="Form"
                    rowProps={{
                      gutter: [16, 16],
                    }}
                    grid
                    columns={gen<%= PascalCase %>FormColumns(
                      {
                        presetColumns,
                        uid: currentValues?.uid!,
                        disabled: !access.canWrite(privileges, currentState),
                        updateFn: (key, value) => {
                          if (key) {
                            formRef.current?.setFieldValue(key, value);
                          }
                          formRef.current?.submit();
                        },
                      },
                      access,
                    )}
                    formRef={formRef}
                    request={async () => {
                      const res = await get<%= PascalCase %>(uid!);
                      setCurrentValues(res.result!);
                      setLoading(false);
                      return res.result!;
                    }}
                    //** 允许字段更新为null */
                    omitNil={false}
                    onFinish={async (values: any) => {
                      updateCurrentValues(values);
                    }}
                    onValuesChange={async (changedValues: any) => {
                      setValuesChanged(true);
                    }}
                    submitter={false}
                  />
                </ProCard>
              ),
            },
            {
              tab: '表体',
              key: 'items',
              children: <<%= PascalCase %>ItemList <%= aggrKey %>={uid!} actionRef={itemActionRef}/>,
            },
            {
              tab: '操作记录',
              key: 'auditLog',
              children: (
                <ProCard bordered>
                  <AuditLog queryFn={queryAuditLogList} bizUid={uid!} reload={tabActiveKey === 'auditLog'} />
                </ProCard>
              ),
            },
          ]}
          tabActiveKey={tabActiveKey}
          onTabChange={(key: string) => setTabActiveKey(key)}
          extra={[
            ...renderActions(actions, currentState!),
            <Reload key="reload" />,
            <EventViewer key="eventViewer" />,
            <DevInspector key="dev" />,
            <ResolveConflictModal key="resolveConflict" />,
            <TableDropdown key="dropdown" menus={[ClearCache, FormLayoutSegmented]} onSelect={(key: string) => {}} />,
          ]}
          style={{ marginBottom: 45 }}
        >
        </PageContainer>
      </ParentContext.Provider>
    </ProProvider.Provider>
  );
};
export default <%= PascalCase %>Detail;
