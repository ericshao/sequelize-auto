// React
import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';
// Antd
import { SaveOutlined } from '@ant-design/icons';
import { FooterToolbar, PageContainer, ProCard, ProFormInstance, ProProvider } from '@ant-design/pro-components';
import { Badge, message, Segmented, Typography } from 'antd';
import { FormLayout } from 'antd/es/form/Form';
// Umi
import { useAccess, useModel, useParams } from '@umijs/max';
// Components
import AuditLog from '@/components/AuditLog';
import { valueTypeMap, ValueTypeMapKey } from '@/components/schema-components';
import BetaSchemaForm from '@/components/SchemaForm';
// Services
import { get<%= PascalCase %>, update<%= PascalCase %> } from '@/services/cmp/<%= camelCase %>';
// Utils
import { getUpdateData, waitTime } from '@/utils';
// Definitions
import { gen<%= PascalCase %>FormColumns } from './<%= camelCase %>.form';
// Subpages

const { Text } = Typography;

type <%= PascalCase %>DetailProps = {
  uid: string;
  onUpdated: () => void;
  insideDrawer?: boolean;
};

const <%= PascalCase %>Detail: React.FC<<%= PascalCase %>DetailProps> = (props) => {
  // useModel
  const { initialState } = useModel('@@initialState');
  const { responsive } = useModel('responsive', (model: any) => ({
    responsive: model.responsive,
  }));

  //  useParams
  const params = useParams<{ uid: string }>();
  const uid = props.uid || params.uid;

  // useEffect

  // useAccess
  const access = useAccess();
  const canEdit = true;

  // useRef
  const formRef = useRef<ProFormInstance<<%= PascalCase %>>>();

  // useState
  const [<%= camelCase %>, set<%= PascalCase %>] = useState<<%= PascalCase %>>();
  const [tabActiveKey, setTabActiveKey] = useState('main');
  const [formLayout, setFormLayout] = useState<FormLayout>('horizontal');
    const [formReady, setFormReady] = useState(false);

  // useEffect
  // 激活Form的当前实例
  useEffect(() => {
    waitTime(500).then(() => {
      if (formRef.current?.getFieldsValue) {
        setFormReady(true);
      }
    });
  }, [formRef.current]);
  
  // useContext
  const values = useContext(ProProvider);
  return (
      <PageContainer
        ghost
        header={{
          title: <%= camelCase %>?.uid,
          onBack: props.insideDrawer ? undefined : () => history.back(),
          breadcrumb: {
            routes: [
              {
                path: '/',
                breadcrumbName: '<%= label %>',
              },
            ],
          },
          style: { zIndex: 10 },
        }}
        tabList={[
          {
            tab: '主信息',
            key: 'main',
          },
          {
            tab: '明细项',
            key: 'items',
          },
          {
            tab: '操作记录',
            key: 'auditLog',
          },
        ]}
        tabActiveKey={tabActiveKey}
        onTabChange={(key: string) => setTabActiveKey(key)}
        extra={[
          <Segmented
            key="formLayout"
            options={['horizontal', 'vertical']}
            onChange={(value) => setFormLayout(value as FormLayout)}
          />,
        ]}
        style={{ marginBottom: 45 }}
      >
        {tabActiveKey === 'main' && (
          <ProProvider.Provider
          value={{
            ...values,
            valueTypeMap,
          }}
        >
          <ProCard bordered>
            <BetaSchemaForm<<%= PascalCase %>, ValueTypeMapKey>
              layout={formLayout}
              layoutType="Form"
              rowProps={{
                gutter: [16, 16],
              }}
              grid
              columns={gen<%= PascalCase %>FormColumns()}
              formRef={formRef}
              request={async () => {
                const res = await get<%= PascalCase %>(uid!);
                set<%= PascalCase %>(res.result!);
                return res.result!;
              }}
              //** 允许字段更新为null */
              omitNil={false}
              onFinish={async (values: any) => {
                const update = getUpdateData(<%= camelCase %>, values);
                if (update) {
                  const res = await update<%= PascalCase %>(update);
                  if (res.success) {
                    message.success({ key: 'update', content: '保存成功' });
                    set<%= PascalCase %>({ ...<%= camelCase %>, ...values });
                    props?.onUpdated();
                  }
                } else {
                  message.info({ key: 'update', content: '无更新内容' });
                }
              }}
              onValuesChange={async (changedValues: any) => {

              }}
              submitter={
                canEdit && tabActiveKey === 'main'
                  ? {
                      searchConfig: {
                        submitText: '保存',
                      },
                      submitButtonProps: {
                        icon: <SaveOutlined />,
                      },
                      resetButtonProps: {
                        style: {
                          display: 'none',
                        },
                      },
                      render: (_, dom) => (
                        <FooterToolbar style={{ zIndex: 1001 }}>
                          {dom}
                        </FooterToolbar>
                      ),
                    }
                  : false
              }
            />
          </ProCard>
        </ProProvider.Provider>
        )}
        {tabActiveKey === 'auditLog' && (
          <ProCard bordered>
            <AuditLog sourceUid={uid!} />
          </ProCard>
        )}
      </PageContainer>
  );
};
export default <%= PascalCase %>Detail;
