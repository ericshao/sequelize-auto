import {
  ALL,
  Body,
  Controller,
  Del,
  Get,
  Inject,
  Param,
  Post,
  Put,
} from '@midwayjs/decorator';
import { Validate } from '@midwayjs/validate';
import { BaseController } from '../../../base/base.controller';
import { Create<%= PascalCase %>Dto, Update<%= PascalCase %>Dto, Delete<%= PascalCase %>Dto } from '../dto/<%= lowerCase%>.dto';
import { <%= PascalCase %>Service } from '../service/<%= lowerCase%>.service';

@Controller('/<%= lowerCase%>', { description: '<%= label %>管理' })
export class <%= PascalCase %>Controller extends BaseController {
  @Inject()
  ctx: any;

  @Inject()
  <%= camelCase %>Service: <%= PascalCase %>Service;
  @Post('/create', {
    description: '创建<%= label %>',
    summary: 'allowTenantAdmin:true;allowTenantMember:false;allowVisitor:false',
  })
  @Validate()
  async create<%= PascalCase %>(@Body(ALL) <%= camelCase %>: Create<%= PascalCase %>Dto) {
    const { userUid: createdBy } = this.ctx.state.user as API.TokenPayload;
    <%= camelCase %>.createdBy = createdBy;
    const result = await this.<%= camelCase %>Service.create(<%= camelCase %>);
    this.success(result);
  }

  @Put('/update', {
    description: '更新<%= label %>',
    summary: 'allowTenantAdmin:true;allowTenantMember:true;allowVisitor:false',
  })
  @Validate()
  async update<%= PascalCase %>(@Body(ALL) <%= camelCase %>: Update<%= PascalCase %>Dto) {
    const { userUid: updatedBy } = this.ctx.state.user as API.TokenPayload;
    <%= camelCase %>.updatedBy = updatedBy;
    const result = await this.<%= camelCase %>Service.update(<%= camelCase %>);
    this.success(result);
  }

  @Del('/delete', {
    description: '删除<%= label %>',
    summary: 'allowTenantAdmin:true;allowTenantMember:false;allowVisitor:false',
  })
  @Validate()
  async delete<%= PascalCase %>(@Body() <%= camelCase %>: Delete<%= PascalCase %>Dto) {
    const result = await this.<%= camelCase %>Service.delete(<%= camelCase %>);
    this.success(result);
  }

  // **** 各类数据查询接口 **** //
  @Post('/list', {
    description: '<%= label %>列表',
    summary: 'allowTenantAdmin:true;allowTenantMember:true;allowVisitor:false',
  })
  async query<%= PascalCase %>List(@Body(ALL) options: API.ListOptions) {
    const result = await this.<%= camelCase %>Service.omniQuery(options);
    this.success(result);
  }
  @Get('/:<%= uidField %>', {
    description: '获取<%= label %>',
    summary: 'allowTenantAdmin:true;allowTenantMember:true;allowVisitor:false',
  })
  async get<%= PascalCase %>(@Param('<%= uidField %>') <%= uidField %>: string) {
    const result = await this.<%= camelCase %>Service.getByUid(<%= uidField %>);
    this.success(result);
  }
}
