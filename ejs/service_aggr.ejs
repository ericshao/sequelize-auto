import { AuditLog } from '@c2pkg/auditlog';
import { EventFlowContext, EventHub, EventHubEvent } from '@c2pkg/eventhub';
import { StateMachineLog } from '@c2pkg/statemachine';
import {
  BaseError,
  CtxTransactional,
  CtxTXParticipant,
} from '@midwayjs-plus/common';
import { TraceSpan } from '@midwayjs-plus/otel';
import { Inject, Provide, Scope, ScopeEnum } from '@midwayjs/core';
import { ValidateService } from '@midwayjs/validate';
import * as _ from 'lodash';
import { ActionNotAllowedError } from '../../common/bizError';
import { StateMachineFactory } from '../../common/statemachine';
import { Create<%= PascalCase %>BscDto, <%= PascalCase %>Bsc } from '../entity';
import { <%= PascalCase %>CreatedEvent, <%= PascalCase %>CancelledEvent } from '../event';
import { <%= PascalCase %>DtService, <%= PascalCase %>BscService } from '../service';
import { <%= PascalCase %>StateMachine } from '../statemachine';

/**
 * @description <%= label %>聚合领域服务
 * @layer Domain
 * @domainObjectType DomainService
 */

@Provide()
@Scope(ScopeEnum.Request, { allowDowngrade: true })
@CtxTXParticipant()
export class <%= PascalCase %>Service extends <%= PascalCase %>BscService {
  @Inject()
  eventHub: EventHub;

  @Inject()
  eventFlowContext: EventFlowContext;

  @Inject()
  stateMachineFactory: StateMachineFactory;

  @Inject()
  <%= camelCase %>StateMachine: <%= PascalCase %>StateMachine;

  @Inject()
  validateService: ValidateService;

  @Inject()
  <%= camelCase %>DtService: <%= PascalCase %>DtService;

  /**
   * 创建<%= label %>
   * @param createDto
   * @returns <%= PascalCase %>
   */
  @CtxTransactional()
  @TraceSpan()
  public async createFull<%= PascalCase %>Bsc(
    createDto: Create<%= PascalCase %>BscDto,
    options?: { flowuid?: string; omitEvent?: boolean }
  ): Promise<<%= PascalCase %>Bsc> {

    const { <%= camelCase %>Dt, ...bsc } = createDto;

    const <%= camelCase %>Bsc = await this.create(bsc);

    if (<%= camelCase %>Dt?.length > 0) {
      const details = await this.<%= camelCase %>DtService.bulkCreate(
        <%= camelCase %>Dt,
        <%= camelCase %>Bsc.uid
      );
      <%= camelCase %>Bsc.<%= camelCase %>Dt = details;
    }
    if (!options?.omitEvent) {
      await this.eventHub.emitPersistentEvent(
        new <%= PascalCase %>CreatedEvent(<%= camelCase %>Bsc, options?.flowuid),
        { delay: 5000 }
      );
    }
    return <%= camelCase %>Bsc;
  }

  @TraceSpan()
  @CtxTransactional()
  @AuditLog('internal/<%= PascalCase %>Bsc', 'req.Array', 'delete', '删除')
  public async deleteFull<%= PascalCase %>Bsc(
    identifiers: string[]
  ): Promise<Record<string, number>> {
    const promises = [
      this.deleteByUid(identifiers),
      this.<%= camelCase %>DtService.deleteByAggrUid(identifiers),
    ];

    const results = await Promise.all(promises);
    return results[0];
  }

  @CtxTransactional()
  public async getFull<%= PascalCase %>Bsc(
    uid: string,
    options: API.QueryOptions = { omitNil: true }
  ): Promise<<%= PascalCase %>Bsc> {
    const { cascading = true, ...queryOptions } = options || {};

    const <%= camelCase %>Bsc = await this.getByUid(uid, queryOptions);

    if (cascading) {
      const details = await this.<%= camelCase %>DtService.findAllByAggrUid(uid);
      <%= camelCase %>Bsc.<%= camelCase %>Dt = details;
    }
    return <%= camelCase %>Bsc;
  }

  @CtxTransactional()
  public async findByBillNo(
    billNo: string,
    options: API.QueryOptions = { omitNil: true }
  ): Promise<<%= PascalCase %>Bsc> {
    const { cascading = true, ...queryOptions } = options || {};

    const <%= camelCase %>Bsc = await this.findOne({ billNo }, queryOptions);
    if (!<%= camelCase %>Bsc) {
      return null;
    }

    if (cascading) {
      const details = await this.<%= camelCase %>DtService.findAllByAggrUid(
        <%= camelCase %>Bsc.uid
      );
      <%= camelCase %>Bsc.<%= camelCase %>Dt = details;
    }
    return <%= camelCase %>Bsc;
  }

  @CtxTransactional()
  @TraceSpan()
  @StateMachineLog(<%= PascalCase %>Bsc.BIZMETA_KEY, '$.uid')
  public async updateFull<%= PascalCase %>Bsc(bscData: <%= PascalCase %>Bsc, forced?: boolean): Promise<{
    success: boolean;
    stateCode?: string;
  }> {
    const { uid: <%= aggrKey%>, <%= camelCase%>Dt, ...bsc } = bscData;

    const stateMachine = await this.getStateMachine();
    const currentBsc = await this.getByUid(<%= aggrKey%>, {
      columns: ['uid', 'stateCode'],
    });
    if (!stateMachine.canExecute(currentBsc.stateCode, 'updateFull<%= PascalCase %>Bsc')) {
      this.logger.warn(
        'updateFull<%= PascalCase %>Bsc',
        <%= aggrKey%>,
        `当前状态${currentBsc.stateCode}不允许更新`
      );
      return { success: false, stateCode: currentBsc.stateCode };
    }

    await Promise.all([
      this.updateByUid(
        <%= PascalCase %>Bsc.getUpdateDto({
          ...bsc,
          identifiers: [currentBsc.uid],
        })
      ),
      <%= camelCase%>Dt?.length > 0 &&
        this.<%= camelCase %>DtService.syncByAggrUid(currentBsc.uid, <%= camelCase%>Dt, forced),
    ]);
    return { success: true, stateCode: currentBsc.stateCode };
  }

  public validate(bscData: <%= PascalCase %>Bsc): <%= PascalCase %>Bsc {
    const result = this.validateService.validate(<%= PascalCase %>Bsc, bscData, {
      validationOptions: { stripUnknown: { arrays: false, objects: true } },
    });

    if (result.error) {
      throw result.error;
    }

    const <%= camelCase %>Bsc = result.value as unknown as <%= PascalCase %>Bsc;
    return <%= camelCase %>Bsc;
  }

  @CtxTransactional()
  @StateMachineLog(<%= PascalCase %>Bsc.BIZMETA_KEY)
  public async recycle(
    uid: string,
    options?: { stateCode?: string }
  ): Promise<string> {
    const currentBsc = await this.checkDependents(uid);

    const stateMachine = await this.getStateMachine();
    if (!stateMachine.canExecute(currentBsc.stateCode, 'recycle<%= PascalCase %>Bsc')) {
      throw new BaseError('当前状态不允许作废');
    }

    await Promise.all([
      this.recycleByUid([uid], options?.stateCode),
      this.<%= camelCase %>DtService.recycleByAggrUid([uid]),
    ]);

    const flowuid = await this.getContextFlowuid(uid);

    const { eventMsgId } = await this.eventHub.emitPersistentEvent(
      new <%= PascalCase %>CancelledEvent(currentBsc, flowuid)
    );
    return eventMsgId;
  }

  @CtxTransactional()
  async checkDependents(uid: string): Promise<<%= PascalCase %>Bsc> {
    const currentBsc = await this.getByUid(uid, {
      columns: [
        'uid',
        'stateCode',
      ],
    });
   // if (currentBsc.decUid) {
   //   throw new ActionNotAllowedError('存在依赖的报关单，不允许继续当前的操作');
   // }
   // if (currentBsc.pspUids?.length) {
   //   throw new ActionNotAllowedError('存在依赖的核放单，不允许继续当前的操作');
   // }
    return currentBsc;
  }

  @CtxTransactional()
  public async recover(uid: string): Promise<void> {
    await Promise.all([
      this.recoverByUid([uid]),
      this.<%= camelCase %>DtService.recoverByAggrUid([uid]),
    ]);
  }

  //*** 请求事件操作 ***//

  //*** 状态转移 ***/

  /**
   *
   * @param <%= aggrKey%>
   * @param event
   */
  @CtxTransactional()
  public async transitStateBy<%= PascalCase %>Bsc(
    <%= aggrKey%>: string,
    event: EventHubEvent<any>
  ): Promise<{
    success: boolean;
    stateCode?: string;
    targetStateCode?: string;
  }> {
    const stateMachine = await this.getStateMachine();
    return await this.transitState(<%= aggrKey%>, event, stateMachine);
  }

  /**
   *
   * @param <%= aggrKey%>
   * @param event
   */
  @CtxTransactional()
  public async transitStateByDefault(
    <%= aggrKey%>: string,
    event: EventHubEvent<any>,
    targetStateCode?: string
  ): Promise<{
    success: boolean;
    stateCode?: string;
    targetStateCode?: string;
  }> {
    const stateMachine = await this.getStateMachine(true);
    return await this.transitState(
      <%= aggrKey%>,
      event,
      stateMachine,
      targetStateCode
    );
  }

  @CtxTransactional()
  @StateMachineLog(<%= PascalCase %>Bsc.BIZMETA_KEY)
  public async transitState(
    <%= aggrKey%>: string,
    event: EventHubEvent<any>,
    stateMachine: <%= PascalCase %>StateMachine,
    targetStateCode?: string
  ): Promise<{
    success: boolean;
    stateCode?: string;
    targetStateCode?: string;
  }> {
    if (!<%= aggrKey%> || !<%= aggrKey%>.startsWith('inv')) {
      return { success: false };
    }

    const <%= camelCase %>Bsc = await this.getByUid(<%= aggrKey%>, {
      columns: ['uid', 'stateCode'],
    });

    if (!targetStateCode) {
      targetStateCode = stateMachine?.transit(
        <%= camelCase %>Bsc.stateCode,
        event
      );
    }
    const res = {
      success: !!targetStateCode,
      stateCode: <%= camelCase %>Bsc.stateCode,
      targetStateCode,
    };
    if (targetStateCode) {
      await this.updateByUid(
        <%= PascalCase %>Bsc.getUpdateDto({
          stateCode: targetStateCode,
          orgId: event.data?.orgId,
          localSid: event.data?.id,

          identifiers: [<%= aggrKey%>],
        })
      );
    }
    return res;
  }

  @CtxTransactional()
  @TraceSpan()
  public async transitToTargetState(
    <%= aggrKey%>s: string[],
    targetStateCode: string,
    forced = false
  ): Promise<void> {
    if (!<%= aggrKey%>s?.length) {
      return;
    }
    let transitUids = <%= aggrKey%>s;
    if (!forced) {
    const stateMachine = await this.getStateMachine();

    const <%= camelCase %>Bscs = await this.findAll(
      { uid: <%= aggrKey%>s },
      { columns: ['uid', 'stateCode'] }
    );

    const allowedBscs = <%= camelCase %>Bscs.filter(<%= camelCase %>Bsc => {
      const isAllowed = stateMachine.allowTransit(
        <%= camelCase %>Bsc.stateCode,
        targetStateCode
      );
      if (!isAllowed) {
        this.logger.warn(
          '状态机未配置转换规则，无法转换状态 %s %s',
          <%= camelCase %>Bsc.stateCode,
          targetStateCode
        );
      }
      return isAllowed;
    });

    if (allowedBscs.length !== <%= camelCase %>Bscs.length) {
      const notAllowedUids = _.difference(
        <%= camelCase %>Bscs.map(head => head.uid),
        allowedBscs.map(head => head.uid)
      );
      throw new ActionNotAllowedError(
        `不允许更改状态为${targetStateCode}:\n${notAllowedUids.join('\n')}`
      );
    }
    transitUids = allowedBscs.map(head => head.uid);
    }
    await this.updateByUid(
      <%= PascalCase %>Bsc.getUpdateDto({
        stateCode: targetStateCode,
        identifiers: transitUids,
      })
    );
  }

  public async getStateMachine(
    useDefault = false
  ): Promise<<%= PascalCase %>StateMachine> {
    if (useDefault) {
      return this.<%= camelCase %>StateMachine;
    }
    let stateMachine = await this.stateMachineFactory.createInstance(
      this.getTenantId(),
      <%= PascalCase %>Bsc.BIZMETA_KEY
    );
    if (!stateMachine) {
      this.logger.info(
        <%= PascalCase %>Bsc.BIZMETA_KEY,
        `state machine for ${this.getTenantId()}  not defined, use default`
      );
      stateMachine = this.<%= camelCase %>StateMachine;
    }
    return stateMachine as unknown as <%= PascalCase %>StateMachine;
  }

  @TraceSpan()
  @CtxTransactional()
  public async getExecutable<%= PascalCase %>Bsc(
    stateMachine: <%= PascalCase %>StateMachine,
    actionCode: string,
    <%= aggrKey%>s?: string[],
    options?: API.QueryOptions
  ): Promise<{
    <%= camelCase %>Bscs: <%= PascalCase %>Bsc[];
    notAllowedUids?: string[];
    executableStateCodes?: string[];
  }> {
    const executableStateCodes = stateMachine
      .getStatesCanExecute(actionCode)
      .map(({ stateCode }) => stateCode);

    if (executableStateCodes.length === 0) {
      this.logger.warn(
        `no executable state for ${actionCode} action in ${<%= PascalCase %>Bsc.BIZMETA_KEY} state machine`
      );
      return { <%= camelCase %>Bscs: [], notAllowedUids: <%= aggrKey%>s };
    }
    const filter = {
      ...(options?.filter as API.Filter),
      stateCode: executableStateCodes,
    };
    if (<%= aggrKey%>s?.length > 0) {
      filter['uid'] = <%= aggrKey%>s;
    }
    const <%= camelCase %>Bscs = await this.findAll(filter, options);
    if (<%= camelCase %>Bscs.length !== <%= aggrKey%>s?.length) {
      const notAllowedUids = _.difference(
        <%= aggrKey%>s,
        <%= camelCase %>Bscs.map(d => d.uid)
      );
      return { <%= camelCase %>Bscs, notAllowedUids, executableStateCodes };
    }
    return { <%= camelCase %>Bscs, executableStateCodes };
  }

  async getContextFlowuid(uid: string): Promise<string> {
    return (await this.eventFlowContext.getFlowContext(uid))?.flowuid;
  }
}
