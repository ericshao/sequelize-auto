import { SaveOutlined } from '@ant-design/icons';
import { ActionType, PageContainer, ProCard, ProFormInstance, ProProvider, TableDropdown } from '@ant-design/pro-components';
import { Typography } from 'antd';
import React, { useContext, useMemo, useRef, useState } from 'react';


import { get<%= PascalCase %>, update<%= PascalCase %> } from '@/services/<%= moduleName%>/<%= aggrName %>';
import AuditLog from '@/shares/components/AuditLog';
import BetaSchemaForm from '@/shares/components/SchemaForm';
import { ValueTypeMapKey, valueTypeMap } from '@/shares/components/schema-components';
import { ActionMap, renderActions } from '@/shares/components/utils';
import { useEventViewer, useFormState, usePageConfig, usePageParam, useStateMachine } from '@/shares/hooks';
import { gen<%= PascalCase %>FormColumns } from './<%= camelCase %>.form';
import <%= PascalCase %>List from './dt/<%= camelCase %>Dt.list';

type <%= PascalCase %>DetailProps = {
  uid: string;
  onUpdated?: () => void;
  onClose?: () => void;
  insideDrawer?: boolean;
};

export const ParentContext = React.createContext<{
  contextRouteKey?: string;
  contextValues?: <%= PascalCase %>;
  contextState?: SMState;
}>({});

const <%= PascalCase %>Detail: React.FC<<%= PascalCase %>DetailProps> = (props) => {
  // 引用上下文

  // 页面参数
  const { uid } = usePageParam(props);
  // 页面配置
  const { pageTitle, routeKey, access, privileges, presetColumns, getTabName, ClearCache } = usePageConfig();
  // useRef
  const formRef = useRef<ProFormInstance<<%= PascalCase %>>>();
  const itemActionRef = useRef<ActionType>();
  // 表单状态
  const {
    loading,
    setLoading,
    formLayout,
    currentValues,
    setCurrentValues,
    valuesChanged,
    setValuesChanged,
    updateCurrentValues,
    getUpdateValues,
    Reload,

  } = useFormState<<%= PascalCase %>>(formRef, get<%= PascalCase %>, update<%= PascalCase %>);
  // 状态机
  const { currentState } = useStateMachine('internal/<%= PascalCase %>', currentValues?.stateCode!);

  const [tabActiveKey, setTabActiveKey] = useState('bsc');

  const actions: ActionMap = useMemo(() => {
    return {
      update<%= PascalCase %>: {
        text: '保存',
        icon: <SaveOutlined />,
        type: 'primary',
        disabled: !valuesChanged,
        onClick: () => formRef.current?.submit(),
        accessible: access.canWrite(privileges, currentState),
      },
    };
  }, [valuesChanged, access, privileges, formRef.current, currentValues, currentState]);

  const { EventViewer } = useEventViewer(uid);


  return (

      <ParentContext.Provider
        value={{ contextRouteKey: routeKey, contextValues: currentValues, contextState: currentState }}
      >
        <PageContainer
          ghost
          contentWidth="Fluid"
          token={pageContainerToken}
          header={{
            title: currentValues?.billNo || currentValues?.preentNo || currentValues?.enterNumber,
            subTitle: (
              <Typography.Text type="secondary" copyable>
                {currentValues?.uid}
              </Typography.Text>
            ),
            tags: <StateTag bizmetaKey="internal/<%= PascalCase %>" stateCode={currentValues?.stateCode} />,
            onBack: props.insideDrawer ? () => props.onClose?.() : () => history.back(),
            breadcrumb: {
              items: [
                {
                  path: '/',
                  title: <%= label %>,
                },
              ],
            },
            style: { zIndex: 10 },
          }}
          tabList={[
            {
              tab: '<%= label %>',
              key: 'bsc',
              children: (
                <ProCard bordered>
                  <BetaSchemaForm<<%= PascalCase %>, ValueTypeMapKey>
                    loading={loading}
                    layout={formLayout}
                    layoutType="Form"
                    rowProps={{
                      gutter: [16, 16],
                    }}
                    grid
                    columns={gen<%= PascalCase %>FormColumns(
                      {
                        presetColumns,
                        uid: currentValues?.uid!,
                        disabled: !access.canWrite(privileges, currentState),
                        updateFn: (key, value) => {
                          if (key) {
                            formRef.current?.setFieldValue(key, value);
                          }
                          formRef.current?.submit();
                        },
                      },
                      access,
                    )}
                    formRef={formRef}
                    request={async () => {
                      const res = await get<%= PascalCase %>(uid!);
                      setCurrentValues(res.result!);
                      setLoading(false);
                      return res.result!;
                    }}
                    //** 允许字段更新为null */
                    omitNil={false}
                    onFinish={async (values: any) => {
                      updateCurrentValues(values);
                    }}
                    onValuesChange={async (changedValues: any) => {
                      setValuesChanged(true);
                    }}
                    submitter={false}
                  />
                </ProCard>
              ),
            },
            {
              tab: '表体',
              key: 'dt',
              children: <<%= PascalCase %>DtList <%= aggrKey %>={uid!} actionRef={itemActionRef}  reload={tabActiveKey === 'dt'} embedded/>,
            },
            {
              tab: '操作记录',
              key: 'auditLog',
              children: (
                <ProCard bordered>
                  <AuditLog queryFn={queryAuditLogList} bizUid={uid!} reload={tabActiveKey === 'auditLog'} />
                </ProCard>
              ),
            },
          ]}
          tabActiveKey={tabActiveKey}
          onTabChange={setTabActiveKey}
          extra={[
            ...renderActions(actions, currentState!),
            <Reload key="reload" />,
            <EventViewer key="eventViewer" />,
    
            <TableDropdown key="dropdown" menus={[ClearCache]} onSelect={(key: string) => {}} />,
          ]}
        />
      </ParentContext.Provider>

  );
};
export default <%= PascalCase %>Detail;
