import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { ActionType } from '@ant-design/pro-components';
import { Access } from '@umijs/max';
import { Button, Layout, Segmented, Space, notification } from 'antd';
import React, { useContext, useEffect, useRef } from 'react';
import { WarehouseContext } from '@/pages';
import { getClassNameByStateCode } from '@/utils';
import { 
  delete<%= PascalCase %>Bsc, 
  export<%= PascalCase %>Bsc,
  query<%= PascalCase %>BscList,
  recover<%= PascalCase %>Bsc, 
  recycle<%= PascalCase %>Bsc, 
  transit<%= PascalCase %>BscToTargetState 
} from '@/services/<%= moduleName%>/<%= aggrName %>';
import UltraTable from '@/shares/components/UltraTable';
import { genExportColumnKeys } from '@/shares/components/schema-components/util';
import { 
  useDetailPageDrawer, 
  useExportData, 
  useFlowBacklog, 
  useImportData, 
  useListState, 
  usePageConfig, 
  useRecycleBin, 
  useStateMachine, 
  useTransitState 
} from '@/shares/hooks';
import { ListCommonProps } from '@/shares/typings/common';
import { gen<%= PascalCase %>BscColumns } from './bsc/<%= camelCase %>Bsc.column';
import { gen<%= PascalCase %>BscFormColumns } from './bsc/<%= camelCase %>Bsc.form';
import <%= PascalCase %>Detail from './<%= camelCase %>.detail';


const { Content } = Layout;

// Types
type T<%= PascalCase %>BscFilter = API.Filter<<%= PascalCase %>Bsc>;

const <%= PascalCase %>List: React.FC<
  ListCommonProps & {

  }
> = (props) => {
  // 引用上下文
  const { warehouseCode } = useContext(WarehouseContext);
  useEffect(() => {
    actionRef.current?.reloadAndRest?.();
  }, [warehouseCode]);
  // useRef
  const actionRef = props.actionRef || useRef<ActionType>();

  // 页面配置
  const {  routeKey, access, privileges, presetColumns, presetFilters, viewFilterEnum, ClearCache } =
    usePageConfig();
  // 表单操作项
  const actionRender = (dom: React.ReactNode, record: <%= PascalCase %>Bsc) => [
  <Button key="read" type="link" size="small" onClick={() => gotoDetailPage(record.uid)}>
    <EditOutlined />
  </Button>,
  ];
  // 列表状态
  const { view, setView, currentRow, setCurrentRow, currentFilter, setCurrentFilter, setCurrentSorter, currentSorter,
     searchFormRef,
    searchProps,
    setSearchCollapsed,
    searchParams,
    setSearchParams, confirmDelete, ultraColumns, createFormColumns, openDetailPage,    recycled,
    RecycleBin,
    polling,
    setPollingPaused,
    PollingSwitch, } = useListState<<%= PascalCase %>Bsc>(
    actionRef,
    {
      viewFilterEnum,
      presetColumns,
      actionRender,
      genColumns: gen<%= PascalCase %>BscColumns,
      genFormColumns: gen<%= PascalCase %>BscFormColumns,
      genColumnsOptions: {
        warehouseCode,
        embedded: props.embedded,
        onRefresh: () => actionRef.current?.reload(),
      },
      onDelete: (records: <%= PascalCase %>Bsc[]) => delete<%= PascalCase %>Bsc(records.map((record) => record.uid)),
    },
  );
  // 状态机
  const { getCurrentState } = useStateMachine('internal/<%= PascalCase %>Bsc');
  const { TransitStateModal } = useTransitState(transit<%= PascalCase %>BscToTargetState, 'internal/<%= PascalCase %>Bsc');
  // Actions
  const gotoDetailPage = (uid: string) => {
    openDetailPage('<%= moduleName%>/<%= camelCase %>', uid);
  };
  // 流程待办
  const { BacklogList } = useFlowBacklog('internal/<%= PascalCase %>Bsc', gotoDetailPage);
  // 详情页 Drawer
  const { detailPageDrawerOpen, setDetailPageDrawerOpen, DetailPageDrawer } = useDetailPageDrawer(
    <<%= PascalCase %>Detail       
      uid={currentRow?.uid!}
      onUpdated={() => {}}
      onClose={() => {
        setDetailPageDrawerOpen(false);
        // props.actionRef.current?.reloadAndRest?.();
      }}
      insideDrawer 
    />,
  );

  const { BatchRecycleModal, BatchRecoverModal } = useRecycleBin(recycle<%= PascalCase %>Bsc, recover<%= PascalCase %>Bsc);

  const { ExportData } = useExportData(
    export<%= PascalCase %>Bsc,
    genExportColumnKeys(gen<%= PascalCase %>BscColumns, { presetColumns }),
    {
      noAttachment: true,
    },
  );

  // import<%= PascalCase %>Bsc
  const { ImportData } = useImportData('internal/<%= PascalCase %>Bsc', '/<%=moduleName %>/api/<%= slashPath %>/import', {
    plain: true,
    initialValues: {
    },
    hideFlow: true,
  });

  return (

        <Layout className="ant-layout-has-sider">
          <Content>
            <UltraTable
              virtual
              rowKey="uid"
              headerTitle={
                <Space>
                  <Segmented
                    options={presetFilters}
                    value={view}
                    onChange={(value) => {
                      setView(value as string);
                      actionRef.current?.reloadAndRest?.();
                    }}
                    style={{ marginLeft: 4 }}
                  />
                  <BacklogList />
                </Space>
              }
              recycled={recycled}
              actionRef={actionRef}
              formRef={searchFormRef}
              search={searchProps}
              onSubmit={(params) => {
                setSearchParams(params);
                setSearchCollapsed(true);
              }}
              onReset={() => {
                setSearchParams(undefined);
              }}
              columns={ultraColumns.getColumns()}
              embedded={props.embedded}
              tabbed={props.tabbed}
              polling={polling}
              request={async (params, sorter) => {
                const { current, pageSize, ...search } = params;
                const filter: T<%= PascalCase %>BscFilter = { ...ultraColumns.generateFilter(search), ...viewFilterEnum[view!]};
                setCurrentFilter(filter);
                const activeSorter = sorter && Object.keys(sorter).length > 0 ? sorter : undefined;
                setCurrentSorter(activeSorter);
                const res = await query<%= PascalCase %>BscList({
                  current,
                  pageSize,
                  columns: ultraColumns.getColumnKeys(),
                  filter,
                  sorter: activeSorter,
                  recycled,
                });
                return {
                  data: res.result.data,
                  success: res.success,
                  total: res.result.total,
                };
              }}
              toolBarRender={() => [
                <ImportData key="import" onSuccess={() => actionRef.current?.reloadAndRest?.()} />,
                <ExportData key="export" filter={currentFilter} sorter={currentSorter} />,
                <RecycleBin key="bin" />,
                <PollingSwitch key="polling" />,
              ]}
              rowSelection={{
                onChange: (selectedRowKeys, selectedRows) => {
                  if (selectedRowKeys.length) {
                    setPollingPaused(true);
                  } else {
                    setPollingPaused(false);
                  }
                },
              }}
              tableAlertRender={({ selectedRowKeys, selectedRows, onCleanSelected }) => {
                const stateCodeSet = new Set(selectedRows.map((row) => row.stateCode));
                if (stateCodeSet.size > 1) {
                  notification.info({
                    key: 'stateCode',
                    message: '提示',
                    description: '已选择项的状态不一致，导致部分批量操作受限',
                  });
                }
                let currentState;
                if (stateCodeSet.size === 1) {
                  currentState = getCurrentState(Array.from(stateCodeSet)[0]!);
                }
                return (
                  <Space size={8}>
                    <span>已选 {selectedRowKeys.length} 项</span>
                    <Access accessible={!!currentState?.actions.includes('recycle<%= PascalCase %>Bsc') && !recycled}>
                      <BatchRecycleModal
                        selectedRows={selectedRows}
                        onSuccess={() => {
                          actionRef.current?.reload();
                          onCleanSelected();
                        }}
                      />
                    </Access>
                    <Access accessible={access.canTenantAdmin() && !!recycled}>
                      <BatchRecoverModal
                        selectedRows={selectedRows}
                        onSuccess={() => {
                          actionRef.current?.reload();
                          onCleanSelected();
                        }}
                      />
                    </Access>
                    <Access
                    accessible={
                      (access.canTenantAdmin() || !!currentState?.actions.includes('transit<%= PascalCase %>BscToTargetState')) &&
                      !recycled
                    }
                  >
                    <TransitStateModal
                      selectedRows={selectedRows}
                      onSuccess={() => {
                        actionRef.current?.reload();
                        onCleanSelected();
                      }}
                      superUser={access.canTenantAdmin()}
                    />
                  </Access>
                  <Access
                  accessible={
                    (access.canTenantAdmin() && recycled) || !!currentState?.actions.includes('deleteFull<%= PascalCase %>Bsc')
                  }
                >
                      <Button
                        key="delete"
                        type="link"
                        danger
                        icon={<DeleteOutlined />}
                        onClick={() => {
                          confirmDelete(selectedRows);
                        }}
                      >
                        删除
                      </Button>
                    </Access>
                  </Space>
                );
              }}
              locale={
                {
                  // emptyText: () => renderEmptyText(actionRef, declarationStatistic?.unclassified, setAspect),
                }
              }
              columnsState={{
                persistenceKey,
                persistenceType: 'localStorage',
              }}
              scroll={{ x: ultraColumns.totalWidth }}
              rowClassName={(record: any) => getClassNameByStateCode(record.stateCode!)}
              summary={(pageData) => {
                return ultraColumns.getSummary(pageData);
              }}
            />

            <DetailPageDrawer
              values={currentRow}
              drawerOpen={detailPageDrawerOpen}
              onCancel={() => {
                actionRef.current?.reload();
                setDetailPageDrawerOpen(false);
                setCurrentRow(undefined);
              }}
            />
          </Content>
        </Layout>
  );
};
export default <%= PascalCase %>List;
