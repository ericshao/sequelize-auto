import { Provide, Scope, ScopeEnum } from '@midwayjs/decorator';
import {
  baseError,
  CtxTransactional,
  CtxTXParticipant,
} from '@midwayjs-plus/common';
import { TraceSpan } from '@midwayjs-plus/otel';
import { TenancyService } from '@c2pkg/multi-tenancy';
import { AuditLog } from '@c2pkg/auditlog';
import { <%= PascalCase %>Dto, Create<%= PascalCase %>Dto, Update<%= PascalCase %>Dto } from '../dto/<%= lowerCase %>.dto';
import { <%= PascalCase %>Model } from '../model/<%= lowerCase %>.model';

@Provide()
@Scope(ScopeEnum.Request, { allowDowngrade: true })
@CtxTXParticipant()
export class <%= PascalCase %>Service extends TenancyService {

  @CtxTransactional()
  public async create(createDto: Create<%= PascalCase %>Dto): Promise<<%= PascalCase %>Dto> {
    const <%= camelCase %> = await <%= PascalCase %>Model.schema(
      this.getTenantSchema()
    ).create(
      {
        ...createDto,
      },
      {
        transaction: this.getTransaction(),
      }
    );
    return <%= camelCase %>.toJSON();
  }

  @AuditLog('<%= PascalCase %>', 'req.Update<%= PascalCase %>Dto.identifiers', 'update')
  @TraceSpan()
  @CtxTransactional()
  public async updateByUid(
    updateDto: Update<%= PascalCase %>Dto
  ): Promise<Record<string, number>> {
    const updated = await <%= PascalCase %>Model.schema(this.getTenantSchema()).update(
      updateDto, {
      where: {
        uid: updateDto.identifiers,
      },
      transaction: this.getTransaction(),
    });
    return { updated: updated[0] };
  }

  @TraceSpan()
  @CtxTransactional()
  @AuditLog('<%= PascalCase %>', 'req.Array', 'delete', '删除')
  public async deleteByUid(
    identifiers: string[]
  ): Promise<Record<string, number>> {
    const deleted = await <%= PascalCase %>Model.schema(this.getTenantSchema()).destroy({
      where: {
        uid: identifiers,
        tenantId: this.getTenantId(),
      },
      transaction: this.getTransaction(),
    });
    return { deleted };
  }

  public async omniQuery(
    options?: API.ListOptions
  ): Promise<API.ListResult<<%= PascalCase %>Dto>> {
    const <%= camelCase %>List = await <%= PascalCase %>Model.omniQuery<typeof <%= PascalCase %>Model, <%= PascalCase %>Dto>(options);
    return <%= camelCase %>List;
  }

  public async getByUid(
    uid: string,
    options?: API.QueryOptions
  ): Promise<<%= PascalCase %>Dto> {
    const <%= camelCase %> = await <%= PascalCase %>Model.schema(
      this.getTenantSchema()
    ).findOne({
      attributes: this.generateAttributes(options?.columns, options?.exclusive),
      where: { uid },
    });
    if (!<%= camelCase %>) throw baseError.EntityNotExistsError;
    return <%= camelCase %>.toJSON();
  }
}
