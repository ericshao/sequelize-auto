import { Provide, Scope, ScopeEnum } from '@midwayjs/core';
import {
  baseError,
  CtxTransactional,
  CtxTXParticipant,
  omitNil,
} from '@midwayjs-plus/common';
import { TraceSpan } from '@midwayjs-plus/otel';
import { TenancyService } from '@c2pkg/multi-tenancy';
import { AuditLog } from '@c2pkg/auditlog';
import { nanoid } from 'nanoid';
import * as _ from 'lodash';
import { <%= PascalCase %>Model } from '../model';
import { <%= PascalCase %>, Create<%= PascalCase %>Dto, Update<%= PascalCase %>Dto } from '../entity';


@Provide()
@Scope(ScopeEnum.Request, { allowDowngrade: true })
@CtxTXParticipant()
export class <%= PascalCase %>Service extends TenancyService {

  @CtxTransactional()
  public async create(createDto: Create<%= PascalCase %>Dto): Promise<<%= PascalCase %>> {
    const <%= camelCase %> = await <%= PascalCase %>Model.schema(this.getTenantSchema()).create(
      {
        ...createDto,
        createdBy: this.getUserId(),
        tenantId: this.getTenantId(),
      },
      {
        transaction: this.getTransaction(),
      }
    );
    return _.omit(<%= camelCase %>.toJSON(), ['id', 'tenantId']) as <%= PascalCase %>;
  }

  @CtxTransactional()
  public async bulkCreate(
    createDtos: Create<%= PascalCase %>Dto[],
    <%= aggrKey %>?: string
  ): Promise<<%= PascalCase %>[]> {
    const <%= camelCase %>s = createDtos.map(createDto => ({
      ...createDto,
      // TODO: 替换或删除此处
      <%= aggrKey %>,
      createdBy: this.getUserId(),
      tenantId: this.getTenantId(),
      uid: this.generateUid(),
    }));

    await <%= PascalCase %>Model.schema(this.getTenantSchema()).bulkCreate(
      <%= camelCase %>s,
      {
        transaction: this.getTransaction(),
      }
    );
    return <%= camelCase %>s.map(
      entity => _.omit(entity, 'tenantId') as <%= PascalCase %>
    );
  }

  @AuditLog('<%= PascalCase %>', 'req.Update<%= PascalCase %>Dto.identifiers', 'update')
  @TraceSpan()
  @CtxTransactional()
  public async updateByUid(
    updateDto: Update<%= PascalCase %>Dto
  ): Promise<Record<string, number>> {
    const updated = await <%= PascalCase %>Model.schema(this.getTenantSchema()).update(
      { ..._.omit(updateDto, ['id', 'uid', 'createdDate', 'tenantId']), lastUpdatedBy: this.getUserId() }, {
        where: this.generateWhereClause(updateDto),
        transaction: this.getTransaction(),
    });
    return { updated: updated[0] };
  }

  @TraceSpan()
  @CtxTransactional()
  @AuditLog('<%= PascalCase %>', 'req.Array', 'delete', '删除')
  public async deleteByUid(
    identifiers: string[]
  ): Promise<Record<string, number>> {
    const deleted = await <%= PascalCase %>Model.schema(this.getTenantSchema()).destroy({
      where: {
        uid: identifiers,
        tenantId: this.getTenantId(),
      },
      transaction: this.getTransaction(),
    });
    return { deleted };
  }

  @CtxTransactional()
  public async deleteByAggrUid(
    identifiers: string[]
  ): Promise<Record<string, number>> {
    const deleted = await <%= PascalCase %>Model.schema(
      this.getTenantSchema()
    ).destroy({
      where: {
        <%= aggrKey %>: identifiers,
        tenantId: this.getTenantId(),
      },
      transaction: this.getTransaction(),
    });
    return { deleted };
  }

  public async omniQuery(
    options?: API.ListOptions
  ): Promise<API.ListResult<<%= PascalCase %>>> {
    const listResult = await <%= PascalCase %>Model.omniQuery<typeof <%= PascalCase %>Model, <%= PascalCase %>>(this.filterByTenantId(options), this.getTenantSchema());
      return {
        ...listResult,
        data: listResult.data.map(
          entity =>
          _.omit(options?.omitNil ? omitNil(entity) : entity, [
            'id',
            'tenantId',
          ]) as <%= PascalCase %>
        ),
      };
  }

  @CtxTransactional()
  public async getByUid(
    uid: string,
    options: API.QueryOptions = { omitNil: true }
  ): Promise<<%= PascalCase %>> {
    const entity = await <%= PascalCase %>Model.schema(this.getTenantSchema()).findOne({
      ...this.generateFindOptions(options),
      where: { uid },
      transaction: this.getTransaction(),
    });
    if (!entity) throw baseError.EntityNotExistsError;
    return _.omit(
      options?.omitNil ? omitNil(entity.toJSON()) : entity.toJSON(),
      ['id', 'tenantId']
    ) as <%= PascalCase %>;
  }

  @CtxTransactional()
  public async findAllByAggrUid(
    <%= aggrKey %>: string,
    options: API.QueryOptions = { omitNil: true }
  ): Promise<<%= PascalCase %>[]> {
    const <%= camelCase %>s = await <%= PascalCase %>Model.schema(
      this.getTenantSchema()
    ).findAll({
      ...this.generateFindOptions(options),
      where: { <%= aggrKey %> },
      transaction: this.getTransaction(),
    });
    return <%= camelCase %>s.map(entity => _.omit(options?.omitNil ? omitNil(entity.toJSON()) : entity.toJSON(), ['id', 'tenantId']) as <%= PascalCase %>);
  }

  @CtxTransactional()
  public async findOne(
    filter: API.Filter,
    options: API.QueryOptions = { omitNil: true }
  ): Promise<<%= PascalCase %>> {
    const entity = await <%= PascalCase %>Model.findOne({
    ...this.generateFindOptions(options),
      where: filter,
      transaction: this.getTransaction(),
    });
    if (entity) {
      return _.omit(
        options?.omitNil ? omitNil(entity.toJSON()) : entity.toJSON(),
        ['id']
      ) as <%= PascalCase %>;
    }
  }

  @CtxTransactional()
  public async findAll(
    filter: API.Filter,
    options: API.QueryOptions = { omitNil: true }
  ): Promise<<%= PascalCase %>[]> {
    const entities = await <%= PascalCase %>Model.findAll({
    ...this.generateFindOptions(options),
      where: filter,
      transaction: this.getTransaction(),
    });
    return entities.map(
      entity =>
        _.omit(options?.omitNil ? omitNil(entity.toJSON()) : entity.toJSON(), [
          'id',
        ]) as <%= PascalCase %>
    );
  }

  generateUid(): string {
    return `${<%= PascalCase %>Model.PREFIX}${nanoid()}`;
  }
}
