#!/usr/bin/env node
const MidwayAuto = require('../lib/midway/midway-auto');
const path = require('path');
const readline = require('readline');
const _ = require('lodash');

const argv = require('yargs')
  .parserConfiguration({
    "parse-numbers": false // disabled because of password field, other option can still be explicitly defined as number type
  })
  .usage(
    'Usage: midway-auto -n <entityName> -a <abbrev> -z <中文名> -o [/path/to/models]'
  )
  .option('name', {
    description: 'Entity name.',
    type: 'string',
    alias: 'n'
  })
  .option('label', {
    description: 'Entity label.',
    type: 'string',
    alias: 'a'
  })
  .option('ejsExt', {
    description: 'EJS 扩展名',
    type: 'string',
    alias: 't'
  })
  .option('output', {
    description: 'What directory to place the models.',
    type: 'string',
    alias: 'o'
  })
  .option('moduleName', {
    description: '模块名称',
    type: 'string',
    alias: 'mn'
  })
  .option('aggrName', {
    description: '聚合名称',
    type: 'string',
    alias: 'an'
  })
  .option('aggrKey', {
    description: '聚合UID键名',
    type: 'string',
    alias: 'ak'
  })
  .option('index', {
    description: 'Write index.ts file.',
    type: 'string',
    alias: 'i'
  })
  .option('singularize', {
    description: 'Singularize model and file names from plural table names',
    type: 'boolean',
    alias: 'sg'
  })
  //.check(argv => Boolean(argv.name && argv.abbrev))
  .argv;


/* eslint-disable complexity, max-statements */
(async function() {

  const dir = !argv.noWrite && (argv.output || path.resolve(process.cwd() + '/models'));

  /** @type {import('../types').SequelizeAuto}  */
  const auto = new MidwayAuto({ lang: 'ts', directory: dir});

  await auto.run(argv.name, argv.label, argv.ejsExt, argv.aggrKey, argv.index, argv.moduleName, argv.aggrName);
  console.log("Done!");

}()).catch(err => {
  if (err.stack) {
    console.error(err.stack);
  } else if (err.message) {
    console.error(err.message);
  } else {
    console.error(err);
  }
  process.exitCode = 1;
});
